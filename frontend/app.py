import streamlit as st
import requests
import json
from typing import List, Dict, Any, Union
import random
import time

# C·∫•u h√¨nh API URL
API_URL = "http://localhost:8000"

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ trang
st.set_page_config(
    page_title="H·ªá Th·ªëng Ki·ªÉm Tra Ki·∫øn Th·ª©c",
    page_icon="üìö",
    layout="wide"
)

# CSS t√πy ch·ªânh ƒë·ªÉ gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c n√∫t v√† t·∫°o giao di·ªán gi·ªëng h√¨nh
st.markdown("""
<style>
    /* T√πy ch·ªânh n√∫t t·ª´ */
    .stButton>button {
        background-color: #1e1e1e !important;
        color: white !important;
        border-radius: 10px !important;
        border: 1px solid #333 !important;
        padding: 5px 15px !important;
        font-size: 0.9rem !important;
        margin: 5px 5px !important;
        min-height: 0 !important;
        line-height: 1.2 !important;
    }
    
    /* T√πy ch·ªânh container ch·ª©a c√°c t·ª´ */
    .word-container {
        display: flex !important;
        flex-wrap: wrap !important;
        gap: 5px !important;
        margin-top: 10px !important;
    }
    
    /* T√πy ch·ªânh ti√™u ƒë·ªÅ */
    h3 {
        margin-bottom: 10px !important;
    }
    
    /* T√πy ch·ªânh n√∫t ki·ªÉm tra */
    button[data-testid="baseButton-secondary"] {
        background-color: #1e1e1e !important;
        color: white !important;
        border-radius: 10px !important;
        border: 1px solid #333 !important;
    }
    
    /* T√πy ch·ªânh n√∫t x√≥a t·ª´ cu·ªëi c√πng */
    button:contains("‚Ü©Ô∏è") {
        background-color: transparent !important;
        border: none !important;
        color: #ff4b4b !important;
        padding: 0 !important;
    }
    
    /* T√πy ch·ªânh n·ªÅn t·ªëi */
    .main .block-container {
        background-color: #0e1117;
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# H√†m g·ªçi API
def get_random_question():
    """L·∫•y m·ªôt c√¢u h·ªèi ng·∫´u nhi√™n t·ª´ API"""
    try:
        response = requests.get(f"{API_URL}/get-question")
        if (response.status_code == 200):
            return response.json()
        else:
            return None
    except Exception as e:
        st.error(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn API: {str(e)}")
        return None

def check_answer(question_id: int, answer: Union[str, List[str]]):
    """G·ª≠i c√¢u tr·∫£ l·ªùi ƒë·ªÉ ki·ªÉm tra"""
    try:
        data = {
            "question_id": question_id,
            "answer": answer
        }
        response = requests.post(f"{API_URL}/check-answer", json=data)
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        st.error(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn API: {str(e)}")
        return None

def generate_exam(num_questions: int):
    """T·∫°o m·ªôt b√†i ki·ªÉm tra m·ªõi"""
    try:
        data = {"num_questions": num_questions}
        response = requests.post(f"{API_URL}/generate-exam", json=data)
        return response.json() if response.status_code == 200 else None
    except Exception as e:
        st.error(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn API: {str(e)}")
        return None

# H√†m hi·ªÉn th·ªã c√¢u h·ªèi
def display_question(question: Dict[str, Any]):
    """Hi·ªÉn th·ªã c√¢u h·ªèi theo lo·∫°i"""
    question_id = question["id"]
    question_type = question["type"]
    question_text = question["question"]
    
    st.markdown(f"### C√¢u h·ªèi {question_id}")
    st.markdown(f"**{question_text}**")
    
    # X·ª≠ l√Ω theo lo·∫°i c√¢u h·ªèi
    if question_type == "fill_blank":
        # C√¢u h·ªèi ƒëi·ªÅn v√†o ch·ªó tr·ªëng
        user_answer = st.text_input("Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:", key=f"fill_{question_id}")
        if st.button("Ki·ªÉm tra", key=f"check_{question_id}"):
            with st.spinner("ƒêang ki·ªÉm tra c√¢u tr·∫£ l·ªùi v√† t·∫°o l·ªùi gi·∫£i th√≠ch..."):
                result = check_answer(question_id, user_answer)
                display_result(result)
    
    elif question_type == "multiple_choice":
        # C√¢u h·ªèi tr·∫Øc nghi·ªám
        options = question.get("options", [])
        user_answer = st.radio("Ch·ªçn ƒë√°p √°n:", options, key=f"choice_{question_id}")
        if st.button("Ki·ªÉm tra", key=f"check_{question_id}"):
            with st.spinner("ƒêang ki·ªÉm tra c√¢u tr·∫£ l·ªùi v√† t·∫°o l·ªùi gi·∫£i th√≠ch..."):
                result = check_answer(question_id, user_answer)
                display_result(result)
    
    elif question_type == "sentence_rearrangement":
        # C√¢u h·ªèi s·∫Øp x·∫øp c√¢u
        options = question.get("options", [])
        
        # Kh·ªüi t·∫°o danh s√°ch ƒë√£ ch·ªçn v√† ch∆∞a ch·ªçn trong session_state
        if f"selected_{question_id}" not in st.session_state:
            st.session_state[f"selected_{question_id}"] = []
            st.session_state[f"available_{question_id}"] = options.copy()
        
        # Hi·ªÉn th·ªã c√°c t·ª´ ƒë√£ ch·ªçn
        st.markdown("### C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:")
        selected_items = st.session_state[f"selected_{question_id}"]
        if selected_items:
            selected_text = " ".join(selected_items)
            st.markdown(f"**{selected_text}**")
            
            # N√∫t x√≥a t·ª´ cu·ªëi c√πng
            if st.button("‚Ü©Ô∏è X√≥a t·ª´ cu·ªëi c√πng", key=f"remove_last_{question_id}"):
                if selected_items:
                    removed_item = selected_items.pop()
                    st.session_state[f"available_{question_id}"].append(removed_item)
                    st.rerun()
        else:
            st.markdown("*H√£y ch·ªçn c√°c t·ª´ theo th·ª© t·ª± ƒë√∫ng*")
        
        # Hi·ªÉn th·ªã c√°c t·ª´ ch∆∞a ch·ªçn
        st.markdown("### C√°c t·ª´ c√≥ s·∫µn:")
        available_items = st.session_state[f"available_{question_id}"]
        
        # S·ª≠ d·ª•ng HTML tr·ª±c ti·∫øp ƒë·ªÉ hi·ªÉn th·ªã c√°c t·ª´ g·∫ßn nhau h∆°n
        html_buttons = '<div style="display: flex; flex-wrap: wrap; gap: 5px; margin-top: 10px;">'
        
        # Hi·ªÉn th·ªã c√°c n√∫t t·ª´ trong container
        cols = st.columns(min(len(available_items), 8) if available_items else 1)
        for i, item in enumerate(available_items):
            with cols[i % min(len(available_items), 8)]:
                if st.button(f"{item}", key=f"select_{question_id}_{i}"):
                    # Th√™m t·ª´ v√†o danh s√°ch ƒë√£ ch·ªçn
                    selected_items.append(item)
                    # X√≥a t·ª´ kh·ªèi danh s√°ch ch∆∞a ch·ªçn
                    available_items.remove(item)
                    st.rerun()
        
        # N√∫t ki·ªÉm tra khi ƒë√£ ch·ªçn h·∫øt c√°c t·ª´
        if not available_items:
            st.success("B·∫°n ƒë√£ s·∫Øp x·∫øp t·∫•t c·∫£ c√°c t·ª´!")
        
        if st.button("Ki·ªÉm tra", key=f"check_{question_id}"):
            with st.spinner("ƒêang ki·ªÉm tra c√¢u tr·∫£ l·ªùi v√† t·∫°o l·ªùi gi·∫£i th√≠ch..."):
                result = check_answer(question_id, selected_items)
                display_result(result)

def display_result(result: Dict[str, Any]):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ki·ªÉm tra"""
    if not result:
        st.error("Kh√¥ng th·ªÉ ki·ªÉm tra c√¢u tr·∫£ l·ªùi")
        return
    
    is_correct = result.get("correct", False)
    explanation = result.get("explanation", "")
    correct_answer = result.get("correct_answer", "")
    
    if is_correct:
        st.success("‚úÖ Ch√≠nh x√°c!")
    else:
        st.error("‚ùå Ch∆∞a ch√≠nh x√°c!")
        
        # Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng
        if isinstance(correct_answer, list):
            st.markdown("**ƒê√°p √°n ƒë√∫ng:**")
            correct_text = " ".join(correct_answer)
            st.markdown(f"**{correct_text}**")
        else:
            st.markdown(f"**ƒê√°p √°n ƒë√∫ng:** {correct_answer}")
    
    # Hi·ªÉn th·ªã l·ªùi gi·∫£i th√≠ch
    if explanation:
        st.markdown("### Gi·∫£i th√≠ch (ƒë∆∞·ª£c t·∫°o b·ªüi AI):")
        st.markdown(explanation)
    else:
        st.info("ƒêang t·∫°o l·ªùi gi·∫£i th√≠ch...")

# Giao di·ªán ch√≠nh
def main():
    st.title("üéì H·ªá Th·ªëng Ki·ªÉm Tra Ki·∫øn Th·ª©c")
    
    # Thanh b√™n ƒë·ªÉ ch·ªçn ch·ª©c nƒÉng
    menu = ["C√¢u h·ªèi ng·∫´u nhi√™n", "B√†i ki·ªÉm tra", "Gi·ªõi thi·ªáu"]
    choice = st.sidebar.selectbox("Ch·ªçn ch·ª©c nƒÉng:", menu)
    
    if choice == "C√¢u h·ªèi ng·∫´u nhi√™n":
        st.header("C√¢u h·ªèi ng·∫´u nhi√™n")
        
        # S·ª≠ d·ª•ng session_state ƒë·ªÉ theo d√µi tr·∫°ng th√°i n√∫t
        if "get_new_question" not in st.session_state:
            st.session_state.get_new_question = False
            
        if st.button("L·∫•y c√¢u h·ªèi m·ªõi"):
            st.session_state.get_new_question = True
            
        # X·ª≠ l√Ω l·∫•y c√¢u h·ªèi m·ªõi khi c·∫ßn
        if st.session_state.get_new_question:
            with st.spinner("ƒêang t·∫£i c√¢u h·ªèi..."):
                question = get_random_question()
                if question:
                    st.session_state.current_question = question
                st.session_state.get_new_question = False  # ƒê·∫∑t l·∫°i tr·∫°ng th√°i
        
        # Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i
        if "current_question" in st.session_state:
            display_question(st.session_state.current_question)
    
    elif choice == "B√†i ki·ªÉm tra":
        st.header("B√†i ki·ªÉm tra")
        
        # T·∫°o b√†i ki·ªÉm tra m·ªõi
        num_questions = st.slider("S·ªë l∆∞·ª£ng c√¢u h·ªèi:", min_value=1, max_value=10, value=5)
        
        # S·ª≠ d·ª•ng session_state ƒë·ªÉ theo d√µi tr·∫°ng th√°i n√∫t
        if "create_new_exam" not in st.session_state:
            st.session_state.create_new_exam = False
            
        if st.button("T·∫°o b√†i ki·ªÉm tra m·ªõi"):
            st.session_state.create_new_exam = True
            
        # X·ª≠ l√Ω t·∫°o b√†i ki·ªÉm tra m·ªõi khi c·∫ßn
        if st.session_state.create_new_exam:
            with st.spinner("ƒêang t·∫°o b√†i ki·ªÉm tra..."):
                questions = generate_exam(num_questions)
                if questions:
                    st.session_state.exam_questions = questions
                    st.session_state.current_exam_index = 0
                    st.session_state.exam_results = []
                st.session_state.create_new_exam = False  # ƒê·∫∑t l·∫°i tr·∫°ng th√°i
        
        # Hi·ªÉn th·ªã b√†i ki·ªÉm tra
        if "exam_questions" in st.session_state and "current_exam_index" in st.session_state:
            questions = st.session_state.exam_questions
            current_index = st.session_state.current_exam_index
            
            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh
            progress = st.progress((current_index) / len(questions))
            st.markdown(f"C√¢u h·ªèi {current_index + 1}/{len(questions)}")
            
            # Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i
            if current_index < len(questions):
                display_question(questions[current_index])
                
                # N√∫t chuy·ªÉn c√¢u h·ªèi
                col1, col2 = st.columns(2)
                with col1:
                    if current_index > 0 and st.button("C√¢u tr∆∞·ªõc"):
                        st.session_state.current_exam_index -= 1
                        st.rerun()
                with col2:
                    if current_index < len(questions) - 1 and st.button("C√¢u ti·∫øp theo"):
                        st.session_state.current_exam_index += 1
                        st.rerun()
            
            # K·∫øt th√∫c b√†i ki·ªÉm tra
            if current_index == len(questions) - 1:
                if st.button("K·∫øt th√∫c b√†i ki·ªÉm tra"):
                    st.session_state.show_exam_results = True
                    st.rerun()
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if "show_exam_results" in st.session_state and st.session_state.show_exam_results:
                st.header("K·∫øt qu·∫£ b√†i ki·ªÉm tra")
                # ·ªû ƒë√¢y s·∫Ω hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt c·ªßa b√†i ki·ªÉm tra
                st.markdown("Ch·ª©c nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...")
    
    else:  # Gi·ªõi thi·ªáu
        st.header("Gi·ªõi thi·ªáu")
        st.markdown("""
        ## H·ªá Th·ªëng Ki·ªÉm Tra Ki·∫øn Th·ª©c
        
        ƒê√¢y l√† m·ªôt ·ª©ng d·ª•ng gi√∫p b·∫°n ki·ªÉm tra ki·∫øn th·ª©c v·ªõi c√°c lo·∫°i c√¢u h·ªèi kh√°c nhau:
        
        - **ƒêi·ªÅn v√†o ch·ªó tr·ªëng**: ƒêi·ªÅn t·ª´ ho·∫∑c c·ª•m t·ª´ v√†o ch·ªó tr·ªëng
        - **Tr·∫Øc nghi·ªám**: Ch·ªçn ƒë√°p √°n ƒë√∫ng t·ª´ c√°c l·ª±a ch·ªçn
        - **S·∫Øp x·∫øp c√¢u**: S·∫Øp x·∫øp c√°c t·ª´/c·ª•m t·ª´ theo th·ª© t·ª± ƒë√∫ng
        
        ### C√°ch s·ª≠ d·ª•ng
        1. Ch·ªçn ch·ª©c nƒÉng t·ª´ thanh b√™n tr√°i
        2. L√†m b√†i v√† ki·ªÉm tra k·∫øt qu·∫£
        3. Xem l·ªùi gi·∫£i th√≠ch ƒë∆∞·ª£c t·∫°o b·ªüi AI ƒë·ªÉ h·ªçc h·ªèi th√™m
        
        ### C√¥ng ngh·ªá s·ª≠ d·ª•ng
        - **Backend**: FastAPI
        - **Frontend**: Streamlit
        - **AI**: OpenAI GPT-4o
        """)

if __name__ == "__main__":
    main() 